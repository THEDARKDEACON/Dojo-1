<?xml version="1.0"?>
<robot name="robot_car" xmlns:xacro="http://www.ros.org/wiki/xacro">
  <!-- Arguments -->
  <xacro:arg name="use_ros2_control" default="true" />
  
  <!-- Include Sensors -->
  <xacro:include filename="$(find robot_description)/urdf/sensors/rplidar.urdf.xacro" />
  
  <!-- RPLIDAR Gazebo plugin -->
  <gazebo reference="rplidar_link">
    <sensor type="ray" name="rplidar">
      <pose>0 0 0 0 0 0</pose>
      <visualize>true</visualize>
      <update_rate>10</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>360</samples>
            <resolution>1.0</resolution>
            <min_angle>0.0</min_angle>
            <max_angle>6.28319</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.15</min>
          <max>12.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="gazebo_ros_rplidar_controller" filename="libgazebo_ros_ray_sensor.so">
        <ros>
          <namespace>/</namespace>
          <remapping>~/out:=scan</remapping>
        </ros>
        <output_type>sensor_msgs/msg/LaserScan</output_type>
        <frame_name>rplidar_link</frame_name>
      </plugin>
    </sensor>
  </gazebo>
  
  <!-- Sensor platform for mounting sensors -->
  <link name="sensor_platform">
    <visual>
      <geometry>
        <box size="0.15 0.085 0.038"/>
      </geometry>
      <material name="sensor_white"/>
    </visual>
    <collision>
      <geometry>
        <box size="0.15 0.085 0.038"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.1"/>
      <inertia ixx="0.0001" ixy="0" ixz="0" iyy="0.0001" iyz="0" izz="0.0001"/>
    </inertial>
  </link>
  
  <!-- Joint to connect sensor platform to base -->
  <joint name="sensor_platform_joint" type="fixed">
    <parent link="base_link"/>
    <child link="sensor_platform"/>
    <origin xyz="0 0 0.05" rpy="0 0 0"/>
  </joint>
  
  <!-- Joint to connect RPLIDAR to sensor platform -->
  <joint name="laser_joint" type="fixed">
    <parent link="sensor_platform"/>
    <child link="rplidar_link"/>
    <origin xyz="0 0 0.03" rpy="0 0 0"/>
  </joint>
  
  <!-- Materials -->
  <material name="sensor_white">
    <color rgba="0.9 0.9 0.9 1"/>
  </material>
  
  
  <!-- Camera parameters -->
  <xacro:property name="camera_width" value="0.05" />
  <xacro:property name="camera_height" value="0.03" />
  <xacro:property name="camera_depth" value="0.05" />
  <xacro:property name="camera_x" value="0.1" />  <!-- Position in front of the robot -->
  <xacro:property name="camera_y" value="0.0" />
  <xacro:property name="camera_z" value="0.05" />
  <xacro:property name="camera_fps" value="30" />
  <xacro:property name="camera_hfov" value="1.0472" />  <!-- 60 degrees in radians -->
  
  <!-- Constants -->
  <xacro:property name="PI" value="3.1415926535897931" />
  
  <!-- Robot dimensions (in meters) - Matching dojo_robot.urdf.xacro -->
  <xacro:property name="base_length" value="0.23" />
  <xacro:property name="base_width" value="0.28" />
  <xacro:property name="base_height" value="0.07" />
  <xacro:property name="wheel_radius" value="0.0325" />
  <xacro:property name="wheel_width" value="0.03" />
  <xacro:property name="wheel_separation" value="0.26" />
  <xacro:property name="wheel_base" value="0.215" />
  <xacro:property name="caster_radius" value="0.01" />
  
  <!-- Materials -->
  <material name="dojo_green">
    <color rgba="0.2 0.8 0.2 1"/>
  </material>
  <material name="wheel_grey">
    <color rgba="0.4 0.4 0.4 1"/>
  </material>
  
  <!-- Base footprint (for navigation) -->
  <link name="base_footprint"/>
  
  <!-- Base link -->
  
  <!-- Base -->
  <link name="base_link">
    <visual>
      <origin xyz="0 0 ${base_height/2}" rpy="0 0 0"/>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
      <material name="blue"/>
    </visual>
    <collision>
      <origin xyz="0 0 ${base_height/2}" rpy="0 0 0"/>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
    </collision>
  </link>
  
  <!-- Wheels -->
  <xacro:macro name="wheel" params="prefix x y z">
    <link name="${prefix}_wheel">
      <visual>
        <origin xyz="0 0 0" rpy="${PI/2} 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
        <material name="black"/>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="${PI/2} 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
      </collision>
      <inertial>
        <mass value="0.1"/>
        <inertia ixx="0.0005" ixy="0" ixz="0"
                 iyy="0.0005" iyz="0"
                 izz="0.0001"/>
      </inertial>
    </link>
    
    <joint name="${prefix}_wheel_joint" type="continuous">
      <parent link="base_link"/>
      <child link="${prefix}_wheel"/>
      <origin xyz="${x} ${y} ${z}" rpy="0 0 0"/>
      <axis xyz="0 1 0"/>
      <limit effort="100" velocity="100"/>
      <dynamics damping="0.1" friction="0.5"/>
    </joint>
  </xacro:macro>
  
  <!-- Casters -->
  <xacro:macro name="caster" params="prefix x y z">
    <link name="${prefix}_caster">
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <sphere radius="${caster_radius}"/>
        </geometry>
        <material name="gray"/>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <sphere radius="${caster_radius}"/>
        </geometry>
      </collision>
      <inertial>
        <mass value="0.01"/>
        <inertia ixx="0.00001" ixy="0" ixz="0"
                 iyy="0.00001" iyz="0"
                 izz="0.00001"/>
      </inertial>
    </link>
    
    <joint name="${prefix}_caster_joint" type="fixed">
      <parent link="base_link"/>
      <child link="${prefix}_caster"/>
      <origin xyz="${x} ${y} ${z}" rpy="0 0 0"/>
    </joint>
  </xacro:macro>
  
  <!-- Create wheels and casters -->
  <xacro:wheel prefix="left" x="0" y="${wheel_separation/2}" z="0"/>
  <xacro:wheel prefix="right" x="0" y="-${wheel_separation/2}" z="0"/>
  <xacro:caster prefix="front" x="${base_length/4}" y="0" z="-${base_height/2}"/>
  <xacro:caster prefix="back" x="-${base_length/4}" y="0" z="-${base_height/2}"/>
  
  <!-- Base link joint -->
  <joint name="base_footprint_joint" type="fixed">
    <parent link="base_footprint"/>
    <child link="base_link"/>
    <origin xyz="0 0 ${wheel_radius}" rpy="0 0 0"/>
  </joint>
  
  <!-- ROS 2 Control -->
  <xacro:if value="$(arg use_ros2_control)">
    <!-- Gazebo ROS control -->
    <gazebo>
      <plugin filename="libgazebo_ros2_control.so" name="gazebo_ros2_control">
        <parameters>/robot_description</parameters>
        <controller_manager_node_name>controller_manager</controller_manager_node_name>
      </plugin>
    </gazebo>
    
    <!-- ROS 2 Control -->
    <ros2_control name="GazeboSystem" type="system">
      <hardware>
        <plugin>gazebo_ros2_control/GazeboSystem</plugin>
      </hardware>
      <joint name="left_wheel_joint">
        <command_interface name="velocity"/>
        <state_interface name="position"/>
        <state_interface name="velocity"/>
      </joint>
      <joint name="right_wheel_joint">
        <command_interface name="velocity"/>
        <state_interface name="position"/>
        <state_interface name="velocity"/>
      </joint>
    </ros2_control>
  </xacro:if>
  
  <!-- Camera link -->
  <link name="camera_link">
    <visual>
      <origin xyz="${camera_x} ${camera_y} ${camera_z}" rpy="0 0 0"/>
      <geometry>
        <box size="${camera_width} ${camera_height} ${camera_depth}"/>
      </geometry>
      <material name="sensor_white"/>
    </visual>
    <collision>
      <origin xyz="${camera_x} ${camera_y} ${camera_z}" rpy="0 0 0"/>
      <geometry>
        <box size="${camera_width} ${camera_height} ${camera_depth}"/>
      </geometry>
    </collision>
  </link>
  
  <!-- Camera joint -->
  <joint name="camera_joint" type="fixed">
    <parent link="base_link"/>
    <child link="camera_link"/>
    <origin xyz="0 0 0" rpy="0 0 0"/>
  </joint>
  
  <!-- Camera sensor -->
  <gazebo reference="camera_link">
    <sensor type="camera" name="camera1">
      <update_rate>${camera_fps}</update_rate>
      <camera name="front">
        <horizontal_fov>${camera_hfov}</horizontal_fov>
        <image>
          <width>640</width>
          <height>480</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.05</near>
          <far>100</far>
        </clip>
      </camera>
      <always_on>true</always_on>
      <update_rate>${camera_fps}</update_rate>
      <visualize>true</visualize>
    </sensor>
  </gazebo>
  
  <!-- Gazebo plugins -->
  <gazebo>
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
      <robotNamespace>/</robotNamespace>
    </plugin>
  </gazebo>
  
  <gazebo reference="base_link">
    <material>Gazebo/Blue</material>
  </gazebo>
  
  <gazebo reference="left_wheel">
    <material>Gazebo/Black</material>
  </gazebo>
  
  <gazebo reference="right_wheel">
    <material>Gazebo/Black</material>
  </gazebo>
  
  <!-- Transmissions for ROS Control -->
  <xacro:if value="$(arg use_ros2_control)">
    <transmission name="left_wheel_trans">
      <type>transmission_interface/SimpleTransmission</type>
      <joint name="left_wheel_joint">
        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
      </joint>
      <actuator name="left_wheel_motor">
        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
        <mechanicalReduction>1</mechanicalReduction>
      </actuator>
    </transmission>
    
    <transmission name="right_wheel_trans">
      <type>transmission_interface/SimpleTransmission</type>
      <joint name="right_wheel_joint">
        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
      </joint>
      <actuator name="right_wheel_motor">
        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
        <mechanicalReduction>1</mechanicalReduction>
      </actuator>
    </transmission>
  </xacro:if>
</robot>
